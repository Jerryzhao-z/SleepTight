package fr.sleeptight.data.localdb;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import fr.sleeptight.data.localdb.Sleep;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SLEEP".
*/
public class SleepDao extends AbstractDao<Sleep, Long> {

    public static final String TABLENAME = "SLEEP";

    /**
     * Properties of entity Sleep.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StartTime = new Property(1, java.util.Date.class, "startTime", false, "START_TIME");
        public final static Property RestlessDuration = new Property(2, Integer.class, "restlessDuration", false, "RESTLESS_DURATION");
        public final static Property Efficiency = new Property(3, Integer.class, "efficiency", false, "EFFICIENCY");
        public final static Property AwakeCount = new Property(4, Integer.class, "awakeCount", false, "AWAKE_COUNT");
        public final static Property AwakeningsCount = new Property(5, Integer.class, "awakeningsCount", false, "AWAKENINGS_COUNT");
        public final static Property AwakeDuration = new Property(6, Integer.class, "awakeDuration", false, "AWAKE_DURATION");
        public final static Property DateOfSleep = new Property(7, java.util.Date.class, "dateOfSleep", false, "DATE_OF_SLEEP");
        public final static Property Duration = new Property(8, Integer.class, "duration", false, "DURATION");
        public final static Property IsMainSleep = new Property(9, Boolean.class, "isMainSleep", false, "IS_MAIN_SLEEP");
        public final static Property MinutesAfterWakeup = new Property(10, Integer.class, "minutesAfterWakeup", false, "MINUTES_AFTER_WAKEUP");
        public final static Property MinutesAwake = new Property(11, Integer.class, "minutesAwake", false, "MINUTES_AWAKE");
        public final static Property MinutesAsleep = new Property(12, Integer.class, "minutesAsleep", false, "MINUTES_ASLEEP");
        public final static Property MinutesToFallAsleep = new Property(13, Integer.class, "minutesToFallAsleep", false, "MINUTES_TO_FALL_ASLEEP");
        public final static Property RestlessCount = new Property(14, Integer.class, "restlessCount", false, "RESTLESS_COUNT");
        public final static Property TimeInBed = new Property(15, Integer.class, "timeInBed", false, "TIME_IN_BED");
    };

    private DaoSession daoSession;


    public SleepDao(DaoConfig config) {
        super(config);
    }
    
    public SleepDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SLEEP\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"START_TIME\" INTEGER," + // 1: startTime
                "\"RESTLESS_DURATION\" INTEGER," + // 2: restlessDuration
                "\"EFFICIENCY\" INTEGER," + // 3: efficiency
                "\"AWAKE_COUNT\" INTEGER," + // 4: awakeCount
                "\"AWAKENINGS_COUNT\" INTEGER," + // 5: awakeningsCount
                "\"AWAKE_DURATION\" INTEGER," + // 6: awakeDuration
                "\"DATE_OF_SLEEP\" INTEGER," + // 7: dateOfSleep
                "\"DURATION\" INTEGER," + // 8: duration
                "\"IS_MAIN_SLEEP\" INTEGER," + // 9: isMainSleep
                "\"MINUTES_AFTER_WAKEUP\" INTEGER," + // 10: minutesAfterWakeup
                "\"MINUTES_AWAKE\" INTEGER," + // 11: minutesAwake
                "\"MINUTES_ASLEEP\" INTEGER," + // 12: minutesAsleep
                "\"MINUTES_TO_FALL_ASLEEP\" INTEGER," + // 13: minutesToFallAsleep
                "\"RESTLESS_COUNT\" INTEGER," + // 14: restlessCount
                "\"TIME_IN_BED\" INTEGER);"); // 15: timeInBed
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SLEEP\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Sleep entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(2, startTime.getTime());
        }
 
        Integer restlessDuration = entity.getRestlessDuration();
        if (restlessDuration != null) {
            stmt.bindLong(3, restlessDuration);
        }
 
        Integer efficiency = entity.getEfficiency();
        if (efficiency != null) {
            stmt.bindLong(4, efficiency);
        }
 
        Integer awakeCount = entity.getAwakeCount();
        if (awakeCount != null) {
            stmt.bindLong(5, awakeCount);
        }
 
        Integer awakeningsCount = entity.getAwakeningsCount();
        if (awakeningsCount != null) {
            stmt.bindLong(6, awakeningsCount);
        }
 
        Integer awakeDuration = entity.getAwakeDuration();
        if (awakeDuration != null) {
            stmt.bindLong(7, awakeDuration);
        }
 
        java.util.Date dateOfSleep = entity.getDateOfSleep();
        if (dateOfSleep != null) {
            stmt.bindLong(8, dateOfSleep.getTime());
        }
 
        Integer duration = entity.getDuration();
        if (duration != null) {
            stmt.bindLong(9, duration);
        }
 
        Boolean isMainSleep = entity.getIsMainSleep();
        if (isMainSleep != null) {
            stmt.bindLong(10, isMainSleep ? 1L: 0L);
        }
 
        Integer minutesAfterWakeup = entity.getMinutesAfterWakeup();
        if (minutesAfterWakeup != null) {
            stmt.bindLong(11, minutesAfterWakeup);
        }
 
        Integer minutesAwake = entity.getMinutesAwake();
        if (minutesAwake != null) {
            stmt.bindLong(12, minutesAwake);
        }
 
        Integer minutesAsleep = entity.getMinutesAsleep();
        if (minutesAsleep != null) {
            stmt.bindLong(13, minutesAsleep);
        }
 
        Integer minutesToFallAsleep = entity.getMinutesToFallAsleep();
        if (minutesToFallAsleep != null) {
            stmt.bindLong(14, minutesToFallAsleep);
        }
 
        Integer restlessCount = entity.getRestlessCount();
        if (restlessCount != null) {
            stmt.bindLong(15, restlessCount);
        }
 
        Integer timeInBed = entity.getTimeInBed();
        if (timeInBed != null) {
            stmt.bindLong(16, timeInBed);
        }
    }

    @Override
    protected void attachEntity(Sleep entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Sleep readEntity(Cursor cursor, int offset) {
        Sleep entity = new Sleep( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // startTime
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // restlessDuration
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // efficiency
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // awakeCount
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // awakeningsCount
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // awakeDuration
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // dateOfSleep
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // duration
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // isMainSleep
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // minutesAfterWakeup
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // minutesAwake
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // minutesAsleep
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // minutesToFallAsleep
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // restlessCount
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15) // timeInBed
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Sleep entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStartTime(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setRestlessDuration(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setEfficiency(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setAwakeCount(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setAwakeningsCount(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setAwakeDuration(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setDateOfSleep(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setDuration(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setIsMainSleep(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setMinutesAfterWakeup(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setMinutesAwake(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setMinutesAsleep(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setMinutesToFallAsleep(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setRestlessCount(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setTimeInBed(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Sleep entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Sleep entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
