package fr.sleeptight.data.localdb;

import java.util.List;
import fr.sleeptight.data.localdb.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "SLEEP".
 */
public class Sleep {

    private Long id;
    private java.util.Date startTime;
    private Integer restlessDuration;
    private Integer efficiency;
    private Integer awakeCount;
    private Integer awakeningsCount;
    private Integer awakeDuration;
    private java.util.Date dateOfSleep;
    private Integer duration;
    private Boolean isMainSleep;
    private Integer minutesAfterWakeup;
    private Integer minutesAwake;
    private Integer minutesAsleep;
    private Integer minutesToFallAsleep;
    private Integer restlessCount;
    private Integer timeInBed;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SleepDao myDao;

    private List<SleepDetail> contains;

    public Sleep() {
    }

    public Sleep(Long id) {
        this.id = id;
    }

    public Sleep(Long id, java.util.Date startTime, Integer restlessDuration, Integer efficiency, Integer awakeCount, Integer awakeningsCount, Integer awakeDuration, java.util.Date dateOfSleep, Integer duration, Boolean isMainSleep, Integer minutesAfterWakeup, Integer minutesAwake, Integer minutesAsleep, Integer minutesToFallAsleep, Integer restlessCount, Integer timeInBed) {
        this.id = id;
        this.startTime = startTime;
        this.restlessDuration = restlessDuration;
        this.efficiency = efficiency;
        this.awakeCount = awakeCount;
        this.awakeningsCount = awakeningsCount;
        this.awakeDuration = awakeDuration;
        this.dateOfSleep = dateOfSleep;
        this.duration = duration;
        this.isMainSleep = isMainSleep;
        this.minutesAfterWakeup = minutesAfterWakeup;
        this.minutesAwake = minutesAwake;
        this.minutesAsleep = minutesAsleep;
        this.minutesToFallAsleep = minutesToFallAsleep;
        this.restlessCount = restlessCount;
        this.timeInBed = timeInBed;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSleepDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public java.util.Date getStartTime() {
        return startTime;
    }

    public void setStartTime(java.util.Date startTime) {
        this.startTime = startTime;
    }

    public Integer getRestlessDuration() {
        return restlessDuration;
    }

    public void setRestlessDuration(Integer restlessDuration) {
        this.restlessDuration = restlessDuration;
    }

    public Integer getEfficiency() {
        return efficiency;
    }

    public void setEfficiency(Integer efficiency) {
        this.efficiency = efficiency;
    }

    public Integer getAwakeCount() {
        return awakeCount;
    }

    public void setAwakeCount(Integer awakeCount) {
        this.awakeCount = awakeCount;
    }

    public Integer getAwakeningsCount() {
        return awakeningsCount;
    }

    public void setAwakeningsCount(Integer awakeningsCount) {
        this.awakeningsCount = awakeningsCount;
    }

    public Integer getAwakeDuration() {
        return awakeDuration;
    }

    public void setAwakeDuration(Integer awakeDuration) {
        this.awakeDuration = awakeDuration;
    }

    public java.util.Date getDateOfSleep() {
        return dateOfSleep;
    }

    public void setDateOfSleep(java.util.Date dateOfSleep) {
        this.dateOfSleep = dateOfSleep;
    }

    public Integer getDuration() {
        return duration;
    }

    public void setDuration(Integer duration) {
        this.duration = duration;
    }

    public Boolean getIsMainSleep() {
        return isMainSleep;
    }

    public void setIsMainSleep(Boolean isMainSleep) {
        this.isMainSleep = isMainSleep;
    }

    public Integer getMinutesAfterWakeup() {
        return minutesAfterWakeup;
    }

    public void setMinutesAfterWakeup(Integer minutesAfterWakeup) {
        this.minutesAfterWakeup = minutesAfterWakeup;
    }

    public Integer getMinutesAwake() {
        return minutesAwake;
    }

    public void setMinutesAwake(Integer minutesAwake) {
        this.minutesAwake = minutesAwake;
    }

    public Integer getMinutesAsleep() {
        return minutesAsleep;
    }

    public void setMinutesAsleep(Integer minutesAsleep) {
        this.minutesAsleep = minutesAsleep;
    }

    public Integer getMinutesToFallAsleep() {
        return minutesToFallAsleep;
    }

    public void setMinutesToFallAsleep(Integer minutesToFallAsleep) {
        this.minutesToFallAsleep = minutesToFallAsleep;
    }

    public Integer getRestlessCount() {
        return restlessCount;
    }

    public void setRestlessCount(Integer restlessCount) {
        this.restlessCount = restlessCount;
    }

    public Integer getTimeInBed() {
        return timeInBed;
    }

    public void setTimeInBed(Integer timeInBed) {
        this.timeInBed = timeInBed;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<SleepDetail> getContains() {
        if (contains == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SleepDetailDao targetDao = daoSession.getSleepDetailDao();
            List<SleepDetail> containsNew = targetDao._querySleep_Contains(id);
            synchronized (this) {
                if(contains == null) {
                    contains = containsNew;
                }
            }
        }
        return contains;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetContains() {
        contains = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
