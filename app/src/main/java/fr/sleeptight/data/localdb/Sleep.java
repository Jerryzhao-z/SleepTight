package fr.sleeptight.data.localdb;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import fr.sleeptight.data.localdb.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "SLEEP".
 */
public class Sleep {

    private Long id;
    private java.util.Date startTime;
    private java.util.Date endTime;
    private Integer duration;
    private Integer wakeupDuration;
    private Integer restlessDuration;
    private Integer efficiency;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SleepDao myDao;

    private List<SleepDetail> contains;

    public Sleep() {
    }

    public Sleep(Long id) {
        this.id = id;
    }

    public Sleep(Long id, java.util.Date startTime, java.util.Date endTime, Integer duration, Integer wakeupDuration, Integer restlessDuration, Integer efficiency) {
        this.id = id;
        this.startTime = startTime;
        this.endTime = endTime;
        this.duration = duration;
        this.wakeupDuration = wakeupDuration;
        this.restlessDuration = restlessDuration;
        this.efficiency = efficiency;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSleepDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public java.util.Date getStartTime() {
        return startTime;
    }

    public void setStartTime(java.util.Date startTime) {
        this.startTime = startTime;
    }

    public java.util.Date getEndTime() {
        return endTime;
    }

    public void setEndTime(java.util.Date endTime) {
        this.endTime = endTime;
    }

    public Integer getDuration() {
        return duration;
    }

    public void setDuration(Integer duration) {
        this.duration = duration;
    }

    public Integer getWakeupDuration() {
        return wakeupDuration;
    }

    public void setWakeupDuration(Integer wakeupDuration) {
        this.wakeupDuration = wakeupDuration;
    }

    public Integer getRestlessDuration() {
        return restlessDuration;
    }

    public void setRestlessDuration(Integer restlessDuration) {
        this.restlessDuration = restlessDuration;
    }

    public Integer getEfficiency() {
        return efficiency;
    }

    public void setEfficiency(Integer efficiency) {
        this.efficiency = efficiency;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<SleepDetail> getContains() {
        if (contains == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SleepDetailDao targetDao = daoSession.getSleepDetailDao();
            List<SleepDetail> containsNew = targetDao._querySleep_Contains(id);
            synchronized (this) {
                if(contains == null) {
                    contains = containsNew;
                }
            }
        }
        return contains;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetContains() {
        contains = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
